---
name: PHP Composer _ PHPUnit _ PHPStan

on:
  workflow_call:
    inputs:
      php-version:
        required: true
        type: string
      # OPTIONAL path with the default database configuration
      phinx-config:
        required: false
        type: string
        default: "phinx.dist.yml"
      # OPTIONAL path where the app code is looking for the database configuration
      phinxlocal-config:
        required: false
        type: string
        default: "phinx.yml"
      # OPTIONAL path to phpdist-config specimen which is used to create the actual phplocal-config
      phpdist-config:
        required: false
        type: string
        default: "./conf/app.conf.dist.php"
      # OPTIONAL path where the app code is looking for the local app configuration
      phplocal-config:
        required: false
        type: string
        default: "./conf/app.conf.local.php"
      runs-on:
        required: false
        type: string
        default: "ubuntu-latest"

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.operating-system }}
    # Limit the running time
    timeout-minutes: 10
    strategy:
      matrix:
        operating-system:
          - "${{ inputs.runs-on }}"
        php-version: ${{ fromJson(inputs.php-version) }}
        # If the bug https://bugs.php.net/bug.php?id=73803 materializes, then remove 7.1 from php-version list above, as
        # ZipArchive class has public properties, that are not visible via reflection in PHP/7.1.
        # Therefore using tools like PHPStan generates error: Access to an undefined property ZipArchive::$numFiles. in class\MyAdminProcess

    env:
      # same as phinx.dist.yml-testing
      DB_DATABASE: testing_db
      DB_USER: root
      DB_PASSWORD: "root"
      #DB_HOST: localhost

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0 # Fetch all history for all branches and tags. Otherwise github.event.pull_request.base.ref SHA isn't found.
      # Fetch latest changes (even by previous job)
      - name: Fetch latest changes
        run: git pull origin ${{ github.ref }}
        shell: bash

      - name: "Install PHP ${{ matrix.php-version }} Test on ${{ runner.os }}"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2
          # phpstan added by tools is the latest one, which may not be supported: e.g. phpstan:2.0.1 fails php:7.2,7.3
          # Note: when phpstan is added by tools phpstan call fails for PHP<7.1
          # coverage none turns off Xdebug as in PHP 5.6,7.0 it would change (format) var_dump output
          coverage: none
        env:
          # fixes Error: Could not authenticate against github.com
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PHP version
        id: php_version
        run: echo "version=$(php -r 'echo PHP_VERSION;')" >> "$GITHUB_OUTPUT"
        shell: bash

      # Check syntax for the specific PHP version
      - name: Check PHP syntax ${{ steps.php_version.outputs.version }}
        run: find ./ -name "*.php" -print0 | xargs -0 -n 1 php -l
        shell: bash

      # Database tests should fire up only if the specified Phinx config file is present
      - name: Check database config file existence
        id: check_files_database
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ inputs.phinx-config }}"

      # PHPUnit tests should fire up only if conf/phpunit-github.xml is present
      - name: Check PHPUnit config file existence
        id: check_files_phpunit
        uses: andstor/file-existence-action@v3
        with:
          files: "./conf/phpunit-github.xml"

      # Copy config.local.dist.php specimen only if present
      - name: Check existence of specimen for config.local.php
        id: check_files_configlocaldist
        uses: andstor/file-existence-action@v3
        with:
          files: "${{ inputs.phpdist-config }}"

      - name: "MySQL db ${{ env.DB_DATABASE }}"
        if: steps.check_files_database.outputs.files_exists == 'true'
        run: |
          sudo /etc/init.d/mysql start
          mysql -V
          mysql -e "STATUS" -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
          mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root';" -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
          mysql -e 'SHOW DATABASES;' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
        shell: bash

      # https://github.com/actions/cache
      # A repository can have up to 10 GB of caches. Once the 10 GB limit is reached, older caches will be evicted based on when the cache was last accessed.
      # Caches that are not accessed within the last week will also be evicted.
      - name: Cache composer dependencies
        uses: actions/cache@v4
        id: vendor-cache
        with:
          # path to Checkout working directory is /home/runner/work/repo-name/repo-name , so just add /vendor/
          path: ${{ github.workspace }}/vendor/
          # Use composer.json for key, if composer.lock is not committed.
          key: phps-${{ runner.os }}-PHP${{ matrix.php-version }}-vendor-${{ hashFiles('**/composer.json') }}
          # key: ${{ runner.os }}-PHP${{ matrix.php-version }}-vendor-${{ hashFiles('**/composer.lock') }}
          #restore-keys: ${{ runner.os }}-PHP${{ matrix.php-version }}-vendor-

      - name: Validate composer.json and composer.lock
        if: ${{ steps.vendor-cache.outputs.cache-hit != 'true' }}
        run: composer validate
        shell: bash

      - name: Install no-dev dependencies
        if: ${{ steps.vendor-cache.outputs.cache-hit != 'true' }}
        run: composer update --no-dev --prefer-dist --no-progress
        shell: bash

      # to fix `Constant DB_USERNAME not found.` etc not only for phpstan but also for phpunit tests
      - name: Copy local config files
        if: steps.check_files_configlocaldist.outputs.files_exists == 'true'
        run: cp -p "${{ inputs.phpdist-config }}" "${{ inputs.phplocal-config }}"
        shell: bash

      - name: Copy local testing database settings
        if: steps.check_files_database.outputs.files_exists == 'true'
        run: cp -p "${{ inputs.phinx-config }}" "${{ inputs.phinxlocal-config }}"
        shell: bash

      - name: Install dependencies
        if: ${{ steps.vendor-cache.outputs.cache-hit != 'true' }}
        run: composer update --prefer-dist --no-progress
        shell: bash

      - name: Phinx migration - migrate
        #PHP/5.6 has auth problem with MySQL/8
        if: ${{ matrix.php-version >= '7.1' && steps.check_files_database.outputs.files_exists == 'true' }}
        run: ./vendor/bin/phinx migrate -e testing --configuration "${{ inputs.phinx-config }}"
        shell: bash

      # PHPunit is installed anyway, so it doesn't make sense to use tools: phpunit
      # Note `sudo /etc/init.d/apache2 start` uses `/etc/apache2/sites-enabled/000-default.conf` where DocumentRoot = `/var/www/html` but without PHP
      # Note: if there are tests without need of MySQL, adapt PHPUnit config file conf/phpunit-github.xml accordingly (perhaps without PHP ^7.1 condition)
      - name: "PHPUnit tests with MySQL"
        if: ${{ matrix.php-version >= '7.1' && steps.check_files_phpunit.outputs.files_exists == 'true' }}
        run: ./vendor/bin/phpunit -c ./conf/phpunit-github.xml
        shell: bash

      # PHPStan works ok for PHP/7.2+ so PHPStan can't even be in composer.json (as ^5.6|^7.0 might be supported)
      - name: "Composer phpstan-webmozart-assert"
        if: ${{ matrix.php-version >= '7.2' && steps.vendor-cache.outputs.cache-hit != 'true' }}
        run: composer require --dev phpstan/phpstan-webmozart-assert --prefer-dist --no-progress
        # this will also add the supported version of phpstan/phpstan
        shell: bash

      - name: "PHPStan webmozart-assert"
        if: ${{ matrix.php-version >= '7.2' }}
        run: |
          # show version
          ./vendor/bin/phpstan.phar -V
          # analyze
          ./vendor/bin/phpstan.phar --configuration=conf/phpstan.webmozart-assert.neon analyse --no-interaction --no-progress .
        shell: bash
